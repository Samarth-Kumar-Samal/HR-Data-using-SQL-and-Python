--- FINDING OUT THE SELLING AVERAGE COST DCEVELOPED IN PYTHON AND C++ ---
SELECT DEVELOPED_IN, AVG(SELL_PRICE) AS AVERAGE_SELLING_COST
FROM SOFTWARE
GROUP BY DEVELOPED_IN
HAVING DEVELOPED_IN = 'C++'
OR DEVELOPED_IN = 'PYTHON';

--- DISPLAY NAMES, AGES OF ALL PROGRAMMERS ---
SELECT FIRST_NAME + ' ' + LAST_NAME AS FULL_NAME, DATEDIFF(YEAR,DATE_OF_BIRTH,GETDATE()) AS AGE
FROM PROGRAMMER;

--- WHAT IS THE HIGHEST NUMBER OF COPIES SOLD BY A PACKAGE? ---
WITH RANKED_SOFTWARE AS 
(
	SELECT DEVELOPED_IN, UNITS,
	ROW_NUMBER() OVER (PARTITION BY DEVELOPED_IN ORDER BY UNITS DESC) AS ROW_NUM
	FROM SOFTWARE
)
SELECT DEVELOPED_IN, UNITS
FROM RANKED_SOFTWARE
WHERE ROW_NUM = 1;

--- WHAT IS THE HIGHEST SALARY IN PROF1 LANGUAGE-WISE ---
WITH PROF1_HIGH_SAL AS 
(
	SELECT PROF1, SALARY,
	ROW_NUMBER() OVER (PARTITION BY PROF1 ORDER BY SALARY DESC) AS SAL
	FROM PROGRAMMER
)
SELECT PROF1,SALARY
FROM PROF1_HIGH_SAL
WHERE SAL = 1;

--- WHAT IS THE HIGHEST SALARY IN PROF2 LANGUAGE-WISE ---
WITH PROF2_HIGH_SAL AS 
(
	SELECT PROF2, SALARY,
	ROW_NUMBER() OVER (PARTITION BY PROF2 ORDER BY SALARY DESC) AS SAL
	FROM PROGRAMMER
)
SELECT PROF2,SALARY
FROM PROF2_HIGH_SAL
WHERE SAL = 1;

--- DISPLAY LOWEST COURSE FEE ---
SELECT DISTINCT COURSE_NAME, COURSE_FEE
FROM EDUCATION
WHERE COURSE_FEE =
(
	SELECT MIN(COURSE_FEE)
	FROM EDUCATION
);

--- HOW MANY PROGRAMMERS DONE THE C++ COURSE? ---
SELECT COURSE_NAME, COUNT(*) AS PROGRAMMER_COUNT
FROM EDUCATION
GROUP BY COURSE_NAME
HAVING COURSE_NAME LIKE 'C++ %' OR COURSE_NAME LIKE '% C++'

--- HOW MUCH REVENUE HAS BEEN EARNED THROUGH SALES OF PACKAGES DEVELOPED IN JAVASCRIPT ---
SELECT DEVELOPED_IN,SUM((SELL_PRICE*UNITS)-COST_PRICE) AS REVENUE
FROM SOFTWARE
GROUP BY DEVELOPED_IN
HAVING DEVELOPED_IN = 'JAVASCRIPT';

--- DISPLAY THE DETAILS OF THE SOFTWARE DEVELOPED BY RAHUL ---
SELECT S.*
FROM SOFTWARE AS S
INNER JOIN PROGRAMMER AS P
ON P.PROGRAMMER_ID = S.PROGRAMMER_ID
WHERE P.FIRST_NAME = 'RAHUL';

--- HOW MANY PROGRAMMERS STUDIED AT ELITE CODING SCHOOL? ---
SELECT COUNT(*) AS PROGRAMMER_COUNT
FROM EDUCATION
WHERE INSTITUTE_NAME = 'ELITE CODING SCHOOL';

--- DISPLAY THE DETAILS OF PACKAGES FOR WHICH DEVELOPMENT COST HAVE BEEN RECOVERED ---
SELECT *
FROM SOFTWARE
WHERE COST_PRICE < (SELL_PRICE * UNITS);

--- HOW MANY PROGRAMMERS PAID 5000 TO 10000 FOR THEIR COURSE? ---
SELECT COUNT(*) AS PROGRAMMERS_COUNT
FROM EDUCATION
WHERE COURSE_FEE BETWEEN 5000 AND 10000;

--- HOW MANY PROGRAMMERS KNOW EITHER JAVA OR PYTHON. ---
SELECT COUNT(*) AS PROGRAMMER_COUNT
FROM PROGRAMMER
WHERE PROF1 IN ('JAVA','PYTHON') OR PROF2 IN ('JAVA','PYTHON');

--- HOW OLD IS THE OLDEST MALE PROGRAMMER ---
SELECT TOP 1 FIRST_NAME,DATEDIFF(YEAR,DATE_OF_BIRTH,GETDATE()) AS AGE
FROM PROGRAMMER
WHERE GENDER = 'MALE'
ORDER BY AGE DESC;

--- CALCULATE THE EXPERIENCE IN YEARS FOR EACH PROGRAMMER AND DISPLAY WITH THEIR NAMES IN DESCENDING ORDER ---
SELECT FIRST_NAME + ' ' + LAST_NAME AS FULL_NAME, DATEDIFF(YEAR,DATE_OF_JOIN,GETDATE()) AS 'EXPERIENCE(IN YEARS)'
FROM PROGRAMMER
ORDER BY FULL_NAME DESC;

--- WHAT ARE THE LANGUAGES STUDIED BY MALE PROGRAMMERS ---
CREATE TABLE #LANG
(
	PROF VARCHAR(15),
)

INSERT INTO #LANG
SELECT DISTINCT PROF1
FROM PROGRAMMER
WHERE GENDER = 'MALE';

INSERT INTO #LANG
SELECT DISTINCT PROF2
FROM PROGRAMMER
WHERE GENDER = 'MALE';

SELECT DISTINCT PROF
FROM #LANG

--- DISPLAY THE DETAILS OF THOSE WHO DON’T KNOW C++, JAVA OR PYTHON ---
SELECT *
FROM PROGRAMMER
WHERE PROF1 NOT IN ('C++','JAVA','PYTHON') AND PROF2 NOT IN ('C++','JAVA','PYTHON');

--- DISPLAY THE SALES COST OF THE PACKAGES DEVELOPED BY EACH PROGRAMMER LANGUAGE-WISE ---
SELECT P.FIRST_NAME + ' ' + P.LAST_NAME AS FULL_NAME, S.DEVELOPED_IN, SUM(S.COST_PRICE) AS SALE_COST
FROM PROGRAMMER P
INNER JOIN SOFTWARE S
ON S.PROGRAMMER_ID = P.PROGRAMMER_ID
GROUP BY P.FIRST_NAME + ' ' + P.LAST_NAME,S.DEVELOPED_IN;

--- DISPLAY EACH PROGRAMMER’S FIRST NAME AND LAST NAME, COSTLIEST AND CHEAPEST PACKAGES DEVELOPED BY HIM OR HER ---
SELECT P.FIRST_NAME, P.LAST_NAME, MAX(S.SELL_PRICE) AS COSTLIEST_PACKAGE, MIN(S.SELL_PRICE) AS CHEAPEST_PACKAGE
FROM PROGRAMMER P
JOIN SOFTWARE S ON P.PROGRAMMER_ID = S.PROGRAMMER_ID
GROUP BY P.FIRST_NAME, P.LAST_NAME;

--- DISPLAY EACH INSTITUTE NAME WITH THE NUMBER OF STUDENTS ---
SELECT INSTITUTE_NAME,COUNT(*) AS STUDENT_COUNT
FROM EDUCATION
GROUP BY INSTITUTE_NAME;

--- DISPLAY THE NAME OF PROGRAMMERS AND THEIR COURSE FEES ---
SELECT P.FIRST_NAME + ' ' + P.LAST_NAME AS FULL_NAME, E.COURSE_FEE
FROM PROGRAMMER P
JOIN EDUCATION E ON P.PROGRAMMER_ID = E.PROGRAMMER_ID;

--- DISPLAY THE NUMBER OF PACKAGES IN EACH LANGUAGE FOR WHICH DEVELOPMENT COST IS LESS THAN 6000: ---
SELECT DEVELOPED_IN, COUNT(*) AS NUMBER_OF_PACKAGES
FROM SOFTWARE
WHERE COST_PRICE < 6000
GROUP BY DEVELOPED_IN;

--- DISPLAY THE TOTAL SCOST, DCOST, AND AMOUNT TO BE RECOVERED FOR EACH PROGRAMMER ---
SELECT P.PROGRAMMER_ID, P.FIRST_NAME, P.LAST_NAME,
       SUM(S.COST_PRICE * S.UNITS) AS TOTAL_DCOST,
       SUM(S.SELL_PRICE * S.UNITS) AS TOTAL_SCOST,
       (SUM(S.SELL_PRICE * S.UNITS) - SUM(S.COST_PRICE * S.UNITS)) AS AMOUNT_TO_BE_RECOVERED
FROM PROGRAMMER P
JOIN SOFTWARE S ON P.PROGRAMMER_ID = S.PROGRAMMER_ID
GROUP BY P.PROGRAMMER_ID, P.FIRST_NAME, P.LAST_NAME;

--- DISPLAY HIGHEST, LOWEST, AND AVERAGE SALARIES FOR THOSE EARNING MORE THAN 2000 ---
SELECT MAX(SALARY) AS MAX_SALARY, MIN(SALARY) AS MIN_SALARY, AVG(SALARY) AS AVERAGE_SALARY
FROM PROGRAMMER
WHERE SALARY > 20000;

--- WHO IS THE HIGHEST-PAID MALE AND FEMALE PROGRAMMER ---
SELECT TOP 1 FIRST_NAME,LAST_NAME,GENDER,MAX(SALARY) AS SALARY
FROM PROGRAMMER
GROUP BY FIRST_NAME, LAST_NAME,GENDER
HAVING GENDER = 'MALE'
UNION
SELECT TOP 1 FIRST_NAME,LAST_NAME,GENDER,MAX(SALARY) AS SALARY
FROM PROGRAMMER
GROUP BY FIRST_NAME, LAST_NAME,GENDER
HAVING GENDER = 'FEMALE';


--- WHO IS THE LEAST EXPERIENCED PROGRAMMER ---
SELECT FIRST_NAME + ' ' + LAST_NAME AS FULL_NAME
FROM PROGRAMMER
WHERE DATEDIFF(YEAR,DATE_OF_JOIN,GETDATE()) IN
(
	SELECT MIN(DATEDIFF(YEAR,DATE_OF_JOIN,GETDATE()))
	FROM PROGRAMMER
)

--- WHO IS THE MOST EXPERIENCED MALE PROGRAMMER KNOWING PYTHON ---
SELECT TOP 1 FIRST_NAME, LAST_NAME, DATEDIFF(YEAR, DATE_OF_JOIN, GETDATE()) AS EXPERIENCE
FROM PROGRAMMER
WHERE GENDER = 'Male' AND (PROF1 = 'Python' OR PROF2 = 'Python')
ORDER BY EXPERIENCE DESC;

--- WHO IS THE YOUNGEST PROGRAMMER KNOWING JAVA ---
SELECT TOP 1 FIRST_NAME, LAST_NAME, DATEDIFF(YEAR, DATE_OF_BIRTH, GETDATE()) AS AGE
FROM PROGRAMMER
WHERE 'JAVA' IN (PROF1,PROF2)
ORDER BY AGE ASC;

--- WHICH INSTITUTE HAS THE MOST NUMBER OF STUDENTS ---
SELECT TOP 1 INSTITUTE_NAME, COUNT(*) AS STUDENT_COUNT
FROM EDUCATION
GROUP BY INSTITUTE_NAME
ORDER BY STUDENT_COUNT DESC;

--- WHAT IS THE COSTLIEST COURSE ---
SELECT TOP 1 COURSE_NAME, MAX(COURSE_FEE) AS COSTLIEST_COURSE
FROM EDUCATION
GROUP BY COURSE_NAME
ORDER BY COSTLIEST_COURSE DESC;

--- WHICH COURSE HAS BEEN DONE BY THE MOST NUMBER OF STUDENTS ---
SELECT TOP 1 COURSE_NAME, COUNT(*) AS NUMBER_OF_STUDENTS
FROM EDUCATION
GROUP BY COURSE_NAME
ORDER BY NUMBER_OF_STUDENTS DESC;

--- DISPLAY THE NAME OF THE INSTITUTE AND COURSE, WHICH HAS BELOW AVG COURSE FEE ---
SELECT INSTITUTE_NAME, COURSE_NAME
FROM EDUCATION
WHERE COURSE_FEE < (SELECT AVG(COURSE_FEE) FROM EDUCATION);

--- WHO DEVELOPED THE PACKAGE THAT HAS SOLD THE LEAST NUMBER OF COPIES ---
SELECT TOP 1 P.FIRST_NAME, P.LAST_NAME, S.SOFTWARE_NAME, S.UNITS
FROM PROGRAMMER P
JOIN SOFTWARE S ON P.PROGRAMMER_ID = S.PROGRAMMER_ID
ORDER BY S.UNITS ASC;

--- WHICH LANGUAGE HAS USED TO DEVELOP THE PACKAGE IN DECREASING ORDER OF SALE AMOUNT ---
SELECT DEVELOPED_IN, MAX(SELL_PRICE*UNITS) AS SALE_AMOUNT
FROM SOFTWARE
GROUP BY DEVELOPED_IN
ORDER BY SALE_AMOUNT DESC;

--- WHICH PROGRAMMER HAS DEVELOPED THE HIGHEST NUMBER OF PACKAGES ---
SELECT TOP 1 P.FIRST_NAME,P.LAST_NAME,MAX(S.UNITS) AS NUMBER_OF_PACKAGES
FROM PROGRAMMER P
INNER JOIN SOFTWARE S
ON P.PROGRAMMER_ID = S.PROGRAMMER_ID
GROUP BY P.FIRST_NAME,P.LAST_NAME
ORDER BY NUMBER_OF_PACKAGES DESC;

--- DISPLAY THE LANGUAGE USED BY EACH PROGRAMMER TO DEVELOP THE HIGHEST SELLING AND LOWEST-SELLING PACKAGE ---
SELECT P.FIRST_NAME, P.LAST_NAME,
       MAX(S.DEVELOPED_IN) AS LANGUAGE_HIGHEST_SELLING,
       MIN(S.DEVELOPED_IN) AS LANGUAGE_LOWEST_SELLING
FROM PROGRAMMER P
JOIN SOFTWARE S ON P.PROGRAMMER_ID = S.PROGRAMMER_ID
GROUP BY P.FIRST_NAME, P.LAST_NAME;

--- IN WHICH YEAR WAS THE MOST NUMBER OF PROGRAMMERS BORN ---
SELECT TOP 1 YEAR(DATE_OF_BIRTH) AS BIRTH_YEAR, COUNT(*) AS NUMBER_OF_PROGRAMMERS_BORN
FROM PROGRAMMER
GROUP BY YEAR(DATE_OF_BIRTH)
ORDER BY NUMBER_OF_PROGRAMMERS_BORN DESC;

--- WHO ARE THE MALE PROGRAMMERS EARNING BELOW THE AVG SALARY OF FEMALE PROGRAMMERS ---
SELECT P.FIRST_NAME, P.LAST_NAME, P.GENDER, P.SALARY
FROM PROGRAMMER P
WHERE P.GENDER = 'MALE' 
AND P.SALARY < 
(
	SELECT AVG(SALARY) 
	FROM PROGRAMMER 
	WHERE GENDER = 'FEMALE'
);

--- DISPLAY THE DETAILS OF THE SOFTWARE DEVELOPED IN PYTHON BY MALE PROGRAMMERS, WHO BELONG TO THE INSTITUTE IN WHICH THE MOST NUMBER OF PROGRAMMERS STUDIED ---
SELECT TOP 1 P.FIRST_NAME, P.LAST_NAME, S.SOFTWARE_NAME, S.DEVELOPED_IN, E.INSTITUTE_NAME
FROM PROGRAMMER P
JOIN SOFTWARE S ON P.PROGRAMMER_ID = S.PROGRAMMER_ID
JOIN EDUCATION E ON P.PROGRAMMER_ID = E.PROGRAMMER_ID
WHERE P.GENDER = 'Male' AND S.DEVELOPED_IN = 'Python'
ORDER BY E.INSTITUTE_NAME DESC

--- DISPLAY THE DETAILS OF THE SOFTWARE THAT HAS BEEN DEVELOPED IN THE LANGUAGE, WHICH IS NEITHER THE FIRST NOR THE SECOND PROFICIENCY OF THE PROGRAMMERS ---
SELECT P.FIRST_NAME, P.LAST_NAME, S.SOFTWARE_NAME, S.DEVELOPED_IN, P.PROF1, P.PROF2
FROM PROGRAMMER P
JOIN SOFTWARE S ON P.PROGRAMMER_ID = S.PROGRAMMER_ID
WHERE S.DEVELOPED_IN NOT IN (P.PROF1, P.PROF2);